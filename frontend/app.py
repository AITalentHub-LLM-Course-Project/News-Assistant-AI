import streamlit as st
import requests
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="RAGa –∏ –∫–æ–ø—ã—Ç–∞ Chatbot", page_icon="ü§ñ", layout="wide")

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π CSS
st.markdown("""
<style>
    .stChat message {
        border-radius: 10px;
        padding: 10px;
    .stChat .user-message {
        background-color: #e6f3ff;
        text-align: right;
    }
    .stChat .bot-message {
        background-color: #f0f0f0;
    }
    .stChat .message-content {
        font-size: 16px;
    }
</style>
""", unsafe_allow_html=True)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_URL = "http://localhost:8000/ask"

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.title('ü§ñ RAGa –∏ –∫–æ–ø—ã—Ç–∞ Chatbot')
    st.markdown('''
    ## About
    –≠—Ç–æ—Ç —á–∞—Ç-–±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –ü–î–î –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç–æ–≤.
    –û–Ω –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ:
    - –ü—Ä–∞–≤–∏–ª–∞—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç–æ–≤
    - –ö–∞–∫ –≤–µ—Å—Ç–∏ —Å–µ–±—è –Ω–∞ –¥–æ—Ä–æ–≥–µ
    - –†–∞—Å—Å–∫–∞–∂–µ—Ç –æ–± –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª–∞—Ö –ü–î–î
    ''')

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
st.title("üí¨ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
if 'messages' not in st.session_state:
    st.session_state.messages = [
        {"role": "assistant", "question": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?"}
    ]

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["question"])


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
def query_api(question, start_date_str, end_date_str):
    try:
        response = requests.post(API_URL, json={
            "question": question,
            "start_date": start_date_str,
            "end_date": end_date_str
        })
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {str(e)}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def handle_user_input(question, start_date_str, end_date_str):
    st.session_state.messages.append({
        "role": "user",
        "question": question,
        "start_date": start_date_str,
        "end_date": end_date_str
    })
    with st.chat_message("user"):
        st.markdown(question)

    with st.spinner('AI –¥—É–º–∞–µ—Ç...'):
        api_response = query_api(question, start_date_str, end_date_str)

    if api_response and 'answer' in api_response:
        bot_response = api_response['answer']
        st.session_state.messages.append({"role": "assistant", "question": bot_response})
        with st.chat_message("assistant"):
            st.markdown(bot_response)
    else:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API.")


# –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
question = st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∑–¥–µ—Å—å...")
start_date = st.date_input("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", value=datetime.now().date())
end_date = st.date_input("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞", value=datetime.now().date())
if question and start_date and end_date:
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –≤ —Å—Ç—Ä–æ—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    start_date_str = start_date.strftime("%Y-%m-%d")
    end_date_str = end_date.strftime("%Y-%m-%d")
    handle_user_input(question, start_date_str, end_date_str)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
if st.button('–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞'):
    st.session_state.messages = [
        {"role": "assistant", "question": "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞. –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?"}
    ]
    st.rerun()